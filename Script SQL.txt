/*CRIAÇÃO DAS TABELAS*/

CREATE DOMAIN descricao varchar(100) NOT NULL;

CREATE TABLE USUARIO(
	ID_USUARIO INTEGER NOT NULL,
	NOME DESCRICAO,
	SENHA VARCHAR(30) NOT NULL,
	TIPO VARCHAR(30) NOT NULL,
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_USUARIO PRIMARY KEY(ID_USUARIO)
);

CREATE TABLE EMPRESA(
	ID_EMPRESA INTEGER NOT NULL,
	RAZAO_SOCIAL DESCRICAO,
	N_FANTASIA DESCRICAO,
	ENDERECO DESCRICAO,
	NUMERO INTEGER NOT NULL,
	BAIRRO DESCRICAO,
	CIDADE DESCRICAO,
	UF CHAR(2) NOT NULL,
	CEP VARCHAR(14) NOT NULL,
	TELEFONE VARCHAR(15) NOT NULL,
	CNPJ VARCHAR(20) NOT NULL,
	EMAIL DESCRICAO,
	LOGO BLOB,
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_EMPRESA PRIMARY KEY(ID_EMPRESA)
);

CREATE TABLE FORNECEDOR(
	ID_FORNECEDOR INTEGER NOT NULL,
	NOME DESCRICAO,
	ENDERECO DESCRICAO,
	NUMERO INTEGER NOT NULL,
	BAIRRO DESCRICAO,
	CIDADE DESCRICAO,
	UF CHAR(2) NOT NULL,
	CEP VARCHAR(16) NOT NULL,
	TELEFONE VARCHAR(16) NOT NULL,
	CNPJ VARCHAR(20) NOT NULL,
	EMAIL DESCRICAO,
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_FORNECEDOR PRIMARY KEY(ID_FORNECEDOR)
);

CREATE TABLE CLIENTES(
	ID_CLIENTE INTEGER NOT NULL,
	NOME DESCRICAO,
	ENDERECO DESCRICAO,
	NUMERO INTEGER NOT NULL,
	BAIRRO DESCRICAO,
	CIDADE DESCRICAO,
	UF CHAR(2) NOT NULL,
	CEP VARCHAR(16) NOT NULL,
	TELEFONE VARCHAR(16) NOT NULL,
	CPF VARCHAR(16) NOT NULL,
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_CLIENTE PRIMARY KEY(ID_CLIENTE)
);

CREATE TABLE PRODUTO(
	ID_PRODUTO INTEGER NOT NULL,
	PRODUTO_DESCRICAO DESCRICAO,
	ID_FORNECEDOR INTEGER NOT NULL,
	VL_CUSTO DECIMAL (11,2) NOT NULL,
	VL_VENDA DECIMAL (11,2) NOT NULL,
	ESTOQUE DECIMAL (11,2) NOT NULL,
	ESTOQUE_MIN DECIMAL (11,2) NOT NULL,
	UNIDADE VARCHAR(6),
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_PRODUTO PRIMARY KEY(ID_PRODUTO),
	CONSTRAINT FK_FORNECEDOR_PRODUTO FOREIGN KEY(ID_FORNECEDOR) REFERENCES FORNECEDOR(ID_FORNECEDOR)
);

CREATE TABLE FORMA_PGTO(
	ID_FORMA_PGTO INTEGER NOT NULL,
	DESCRICAO DESCRICAO,
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_FORMA_PGTO PRIMARY KEY(ID_FORMA_PGTO)
);

CREATE TABLE COMPRA(
	ID_COMPRA INTEGER NOT NULL,
	ID_FORNECEDOR INTEGER NOT NULL,
	ID_FORMA_PGTO INTEGER NOT NULL,
	USUARIO DESCRICAO,
	VALOR DECIMAL(11,2),
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_COMPRA PRIMARY KEY(ID_COMPRA),
	CONSTRAINT FK_FORNECEDOR_COMPRA FOREIGN KEY(ID_FORNECEDOR) REFERENCES FORNECEDOR(ID_FORNECEDOR),
	CONSTRAINT FK_FORMA_PGTO_COMPRA FOREIGN KEY(ID_FORMA_PGTO) REFERENCES FORMA_PGTO(ID_FORMA_PGTO)
);

ALTER TABLE COMPRA ADD COND_PGTO INTEGER;

-- Consulta de compra por forma de pagamento
SELECT A.ID_FORMA_PGTO, B.DESCRICAO, COUNT(A.ID_COMPRA) AS QTDE_COMPRA, SUM(A.VALOR) AS VALOR_TOTAL  
FROM COMPRA A 
INNER JOIN FORMA_PGTO B ON B.ID_FORMA_PGTO=A.ID_FORMA_PGTO 
GROUP BY A.ID_FORMA_PGTO, B.DESCRICAO;


-- Consulta de compra por período
SELECT A.ID_FORMA_PGTO, B.DESCRICAO, COUNT(A.ID_COMPRA) AS QTDE_COMPRA, SUM(A.VALOR) AS VALOR_TOTAL  
FROM COMPRA A 
INNER JOIN FORMA_PGTO B ON B.ID_FORMA_PGTO=A.ID_FORMA_PGTO 
WHERE A.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY A.ID_FORMA_PGTO, B.DESCRICAO;

-- Consulta de compra por período agrupado por fornecedor
SELECT COUNT(A.ID_COMPRA) AS COMPRAS, SUM(A.VALOR) AS VALOR_TOTAL, A.ID_FORNECEDOR, B.NOME  
FROM COMPRA A 
INNER JOIN FORNECEDOR B ON B.ID_FORNECEDOR=A.ID_FORNECEDOR 
WHERE A.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY A.ID_FORNECEDOR, B.NOME;

-- Consulta de compra por quanto foi pago (agrupado por fornecedor)
SELECT COUNT(A.ID_COMPRA) AS COMPRAS, SUM(A.TOTAL_PAGAR) AS VALOR_PAGAR, C.ID_FORNECEDOR, C.NOME AS NOME_FORNECEDOR
FROM CONTAS_PAGAR A 
INNER JOIN COMPRA B ON B.ID_COMPRA=A.ID_COMPRA 
INNER JOIN FORNECEDOR C ON C.ID_FORNECEDOR=B.ID_FORNECEDOR
WHERE A.STATUS='Pago' -- OU "Recebido"
GROUP BY C.ID_FORNECEDOR, C.NOME;

-- Consulta de quanto deve ser pago (agrupado por fornecedor)
SELECT COUNT(A.ID_COMPRA) AS COMPRAS, SUM(A.VALOR_PARCELA) AS VALOR_PAGAR, C.ID_FORNECEDOR, C.NOME AS NOME_FORNECEDOR
FROM CONTAS_PAGAR A 
INNER JOIN COMPRA B ON B.ID_COMPRA=A.ID_COMPRA 
INNER JOIN FORNECEDOR C ON C.ID_FORNECEDOR=B.ID_FORNECEDOR
AND A.STATUS='Em aberto' 
GROUP BY C.ID_FORNECEDOR, C.NOME
ORDER BY C.ID_FORNECEDOR;

-- Consulta de quanto deve ser pago por período (agrupado por fornecedor)
SELECT C.ID_FORNECEDOR, COUNT(A.ID_COMPRA) AS QTDE_COMPRAS, SUM(A.VALOR_PARCELA) AS VALOR_PAGAR, C.NOME AS NOME_FORNECEDOR
FROM CONTAS_PAGAR A 
INNER JOIN COMPRA B ON B.ID_COMPRA=A.ID_COMPRA 
INNER JOIN FORNECEDOR C ON C.ID_FORNECEDOR=B.ID_FORNECEDOR
AND A.STATUS='Em aberto' 
AND A.DT_VENCIMENTO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY C.ID_FORNECEDOR, C.NOME
ORDER BY C.ID_FORNECEDOR;

-- Consulta de quanto foi comprado por mês (agrupado por fornecedor)
SELECT 
EXTRACT (MONTH FROM A.CADASTRO) AS MES,
EXTRACT (YEAR FROM A.CADASTRO) AS ANO,
SUM (A.VALOR) AS VALOR_COMPRA
FROM COMPRA A
WHERE A.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY EXTRACT (MONTH FROM A.CADASTRO), EXTRACT (YEAR FROM A.CADASTRO)
ORDER BY EXTRACT (MONTH FROM A.CADASTRO);


CREATE TABLE ITEM_COMPRA(
	ID_SEQUENCIA INTEGER NOT NULL,
	ID_COMPRA INTEGER NOT NULL,
	ID_PRODUTO INTEGER NOT NULL,
	QTDE DECIMAL(11,2) NOT NULL,
	VL_CUSTO DECIMAL(11,2) NOT NULL,
	DESCONTO DECIMAL(11,2),
	TOTAL_ITEM DECIMAL(11,2) NOT NULL,
	CONSTRAINT PK_ITEM_COMPRA PRIMARY KEY(ID_SEQUENCIA, ID_COMPRA),
	CONSTRAINT FK_COMPRA_ITEM_COMPRA FOREIGN KEY(ID_COMPRA) REFERENCES COMPRA(ID_COMPRA),
	CONSTRAINT FK_PRODUTO_ITEM_COMPRA FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO) ON DELETE CASCADE
);

CREATE TABLE CONTAS_PAGAR(
	ID_SEQUENCIA INTEGER NOT NULL,
	ID_COMPRA INTEGER NOT NULL,
	VALOR_PARCELA DECIMAL(11,2) NOT NULL,
	DT_VENCIMENTO DATE NOT NULL,
	DT_PAGAMENTO DATE,
	ATRASO INTEGER,
	JUROS DECIMAL(11,2),
	VL_JUROS DECIMAL(11,2),
	TOTAL_PAGAR DECIMAL(11,2),
	STATUS VARCHAR(30),
	CONSTRAINT PK_CONTAS_PAGAR PRIMARY KEY(ID_SEQUENCIA, ID_COMPRA),
	CONSTRAINT FK_COMPRA_CONTAS_PAGAR FOREIGN KEY(ID_COMPRA) REFERENCES COMPRA(ID_COMPRA) ON DELETE CASCADE
);

CREATE TABLE VENDA(
	ID_VENDA INTEGER NOT NULL,
	ID_CLIENTE INTEGER NOT NULL,
	ID_FORMA_PGTO INTEGER NOT NULL, /*NOT NULL REMOVIDO*/
	USUARIO DESCRICAO,
	VALOR DECIMAL(11,2),
	CADASTRO DATE NOT NULL,
	CONSTRAINT PK_VENDA PRIMARY KEY(ID_VENDA),
	CONSTRAINT FK_CLIENTE_VENDA FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTES(ID_CLIENTE),
	CONSTRAINT FK_FORMA_PGTO_VENDA FOREIGN KEY(ID_FORMA_PGTO) REFERENCES FORMA_PGTO(ID_FORMA_PGTO)
);

SELECT * FROM VENDA;

ALTER TABLE VENDA ADD PARCELA INTEGER;
ALTER TABLE VENDA ADD DINHEIRO DECIMAL(11,2);
ALTER TABLE VENDA ADD TROCO DECIMAL(11,2);

-- Agrupar vendas por forma de pagamento
SELECT A.ID_FORMA_PGTO, B.DESCRICAO, COUNT(A.ID_VENDA) AS QTDE_VENDA, SUM(A.VALOR) AS VALOR_TOTAL  
FROM VENDA A 
INNER JOIN FORMA_PGTO B ON B.ID_FORMA_PGTO=A.ID_FORMA_PGTO 
GROUP BY A.ID_FORMA_PGTO, B.DESCRICAO;

-- Agrupar vendas por período definido
SELECT A.ID_FORMA_PGTO, B.DESCRICAO, COUNT(A.ID_VENDA) AS QTDE_VENDA, SUM(A.VALOR) AS VALOR_TOTAL  
FROM VENDA A 
INNER JOIN FORMA_PGTO B ON B.ID_FORMA_PGTO=A.ID_FORMA_PGTO 
WHERE A.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY A.ID_FORMA_PGTO, B.DESCRICAO;

-- Agrupar vendas por período agrupado por fornecedor
SELECT COUNT(A.ID_VENDA) AS VENDAS, SUM(A.VALOR) AS VALOR_TOTAL, A.ID_CLIENTE, B.NOME  
FROM VENDA A 
INNER JOIN CLIENTES B ON B.ID_CLIENTE=A.ID_CLIENTE 
WHERE A.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY A.ID_CLIENTE, B.NOME;

-- Consulta de vendas por quanto foi recebido (agrupado por cliente)
SELECT COUNT(A.ID_VENDA) AS VENDAS, SUM(A.TOTAL_PAGAR) AS VALOR_RECEBIDO, C.ID_CLIENTE, C.NOME AS NOME_CLIENTE
FROM CONTAS_RECEBER A 
INNER JOIN VENDA B ON B.ID_VENDA=A.ID_VENDA 
INNER JOIN CLIENTES C ON C.ID_CLIENTE=B.ID_CLIENTE
WHERE A.STATUS='Recebido' -- OU "Em aberto"
GROUP BY C.ID_CLIENTE, C.NOME
ORDER BY C.ID_CLIENTE;

-- Consulta de vendas por quanto foi recebido por período (agrupado por cliente)
SELECT COUNT(A.ID_VENDA) AS VENDAS, SUM(A.TOTAL_PAGAR) AS VALOR_RECEBIDO, C.ID_CLIENTE, C.NOME AS NOME_CLIENTE
FROM CONTAS_RECEBER A 
INNER JOIN VENDA B ON B.ID_VENDA=A.ID_VENDA 
INNER JOIN CLIENTES C ON C.ID_CLIENTE=B.ID_CLIENTE
WHERE A.STATUS='Recebido' -- OU "Em aberto"
AND B.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY C.ID_CLIENTE, C.NOME
ORDER BY C.ID_CLIENTE;

-- Consulta de quanto deve ser recebido por período (agrupado por cliente)
SELECT C.ID_CLIENTE, C.NOME AS NOME_CLIENTE, COUNT(A.ID_VENDA) AS QTDE_VENDAS, SUM(A.VALOR_PARCELA) AS VALOR_PAGAR
FROM CONTAS_RECEBER A 
INNER JOIN VENDA B ON B.ID_VENDA=A.ID_VENDA 
INNER JOIN CLIENTES C ON C.ID_CLIENTE=B.ID_CLIENTE
AND A.STATUS='Em aberto' 
AND A.DT_VENCIMENTO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY C.ID_CLIENTE, C.NOME
ORDER BY C.ID_CLIENTE;

-- Consulta de quanto foi vendido por mês (agrupado por fornecedor)
SELECT 
EXTRACT (MONTH FROM A.CADASTRO) AS MES,
EXTRACT (YEAR FROM A.CADASTRO) AS ANO,
SUM (A.VALOR) AS VALOR_VENDA
FROM VENDA A
WHERE A.CADASTRO BETWEEN '01.01.2025' AND '31.12.2025'
GROUP BY EXTRACT (MONTH FROM A.CADASTRO), EXTRACT (YEAR FROM A.CADASTRO)
ORDER BY EXTRACT (MONTH FROM A.CADASTRO);

SELECT * FROM CONTAS_RECEBER;


--REMOVER O ATRIBUTO NOT NULL DE ID_FORMA_PGTO--

-- Remover a constraint FK primeiro
ALTER TABLE VENDA DROP CONSTRAINT FK_FORMA_PGTO_VENDA; -- ok
  
-- Adicionar nova coluna temporária que permite NULL
ALTER TABLE VENDA ADD ID_FORMA_PGTO_TEMP INTEGER; -- ok

-- Copiar os dados
UPDATE VENDA SET ID_FORMA_PGTO_TEMP = ID_FORMA_PGTO; -- ok
  
-- Remover a coluna original
ALTER TABLE VENDA DROP ID_FORMA_PGTO; -- ok

-- Renomear a coluna temporária
ALTER TABLE VENDA ALTER COLUMN ID_FORMA_PGTO_TEMP TO ID_FORMA_PGTO; -- ok
  
-- Recriar a constraint FOREIGN KEY
ALTER TABLE VENDA 
ADD CONSTRAINT FK_FORMA_PGTO_VENDA 
FOREIGN KEY (ID_FORMA_PGTO) 
REFERENCES FORMA_PGTO(ID_FORMA_PGTO); -- ok

CREATE TABLE ITEM_VENDA(
	ID_SEQUENCIA INTEGER NOT NULL,
	ID_VENDA INTEGER NOT NULL,
	ID_PRODUTO INTEGER NOT NULL,
	QTDE DECIMAL(11,2) NOT NULL,
	VL_CUSTO DECIMAL(11,2) NOT NULL,
	DESCONTO DECIMAL(11,2),
	TOTAL_ITEM DECIMAL(11,2) NOT NULL,
	CONSTRAINT PK_ITEM_VENDA PRIMARY KEY(ID_SEQUENCIA, ID_VENDA),
	CONSTRAINT FK_VENDA_ITEM_VENDA FOREIGN KEY(ID_VENDA) REFERENCES VENDA(ID_VENDA),
	CONSTRAINT FK_PRODUTO_ITEM_VENDA FOREIGN KEY(ID_PRODUTO) REFERENCES PRODUTO(ID_PRODUTO) ON DELETE CASCADE
);

ALTER TABLE ITEM_VENDA ALTER VL_CUSTO TO VL_VENDA;

CREATE TABLE CONTAS_RECEBER(
	ID_SEQUENCIA INTEGER NOT NULL,
	ID_VENDA INTEGER NOT NULL,
	VALOR_PARCELA DECIMAL(11,2) NOT NULL,
	DT_VENCIMENTO DATE NOT NULL,
	DT_PAGAMENTO DATE,
	ATRASO INTEGER,
	JUROS DECIMAL(11,2),
	VL_JUROS DECIMAL(11,2),
	TOTAL_PAGAR DECIMAL(11,2),
	STATUS VARCHAR(30),
	CONSTRAINT PK_CONTAS_RECEBER PRIMARY KEY(ID_SEQUENCIA, ID_VENDA),
	CONSTRAINT FK_VENDA_CONTAS_RECEBER FOREIGN KEY(ID_VENDA) REFERENCES VENDA(ID_VENDA) ON DELETE CASCADE
);

/*CRIAÇÃO DOS GENERATORS/TRIGGERS - USUÁRIO*/

CREATE GENERATOR GEN_ID_USUARIO;

CREATE TRIGGER INSERE_ID_USUARIO FOR USUARIO ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_USUARIO=gen_id(GEN_ID_USUARIO,1);
END

/*TESTE P/ TRIGGER DE USUÁRIO (INCREMENTAR ID AUTOMATICAMENTE) - OK*/

INSERT INTO USUARIO(NOME, SENHA, TIPO, CADASTRO)
VALUES('TESTE1', '123', 'ADM', '06.08.2025');

INSERT INTO USUARIO(NOME, SENHA, TIPO, CADASTRO)
VALUES('TESTE2', '1234', 'ADM', '06.08.2025');

INSERT INTO USUARIO(NOME, SENHA, TIPO, CADASTRO)
VALUES('TESTE3', '12345', 'ADM', '06.08.2025');

SELECT * FROM USUARIO;

/*CRIAÇÃO DOS TRIGGERS/GENERATORS - CLIENTE*/

CREATE GENERATOR GEN_ID_CLIENTE;

CREATE TRIGGER INSERE_ID_CLIENTE FOR CLIENTES ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_CLIENTE=gen_id(GEN_ID_CLIENTE,1);
END

/*CRIAÇÃO DOS TRIGGERS/GENERATORS - EMPRESA*/

CREATE GENERATOR GEN_ID_EMPRESA;

CREATE TRIGGER INSERE_ID_EMPRESA FOR EMPRESA ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_EMPRESA=gen_id(GEN_ID_EMPRESA,1);
END

/*CRIAÇÃO DOS TRIGGERS/GENERATORS - FORNECEDOR*/

CREATE GENERATOR GEN_ID_FORNECEDOR;

CREATE TRIGGER INSERE_ID_FORNECEDOR FOR FORNECEDOR ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_FORNECEDOR=gen_id(GEN_ID_FORNECEDOR,1);
END

/*CRIAÇÃO DOS TRIGGERS/GENERATORS - FORMA_PGTO*/

CREATE GENERATOR GEN_ID_FORMA_PGTO;

CREATE TRIGGER INSERE_ID_FORMA_PGTO FOR FORMA_PGTO ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_FORMA_PGTO=gen_id(GEN_ID_FORMA_PGTO,1);
END

/*CRIAÇÃO DOS TRIGGERS/GENERATORS - COMPRA*/

CREATE GENERATOR GEN_ID_COMPRA;

CREATE TRIGGER INSERE_ID_COMPRA FOR COMPRA ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_COMPRA=gen_id(GEN_ID_COMPRA,1);
END

/*CRIAÇÃO DOS TRIGGERS/GENERATORS - VENDA*/

CREATE GENERATOR GEN_ID_VENDA;

CREATE TRIGGER INSERE_ID_VENDA FOR VENDA ACTIVE BEFORE INSERT POSITION 0 AS
BEGIN 
	NEW.ID_VENDA=gen_id(GEN_ID_VENDA,1);
END



